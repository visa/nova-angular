/**
 *              © 2025 Visa
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **/
import { camelCase, noCase, sentenceCase } from 'change-case';
import { readdirSync, readFileSync, statSync, writeFileSync } from 'fs';
import { globSync } from 'glob';
import { basename, dirname, join, resolve } from 'path';
import { fileURLToPath } from 'url';

const ExampleType = {
  components: 'components',
  services: 'services',
  utilities: 'utilities'
};
const ExampleTypeSingular = {
  components: 'component',
  services: 'service',
  utilities: 'utility'
};

const sharedImports = `/**
 *              © 2025 Visa
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **/
/** This file is autogenerated */
import { Routes } from '@angular/router';\n`;
const sharedConstantsImports = `import { TITLE_SEPARATOR, TITLE_SUFFIX } from 'apps/workshop/src/assets/app.constants';\n\n`;

const docsFileExtension = '.docs.ts';
const routesFileExtension = '.routes.ts';

const __dirname = dirname(fileURLToPath(import.meta.url));
const cwd = resolve(__dirname, '../apps/workshop/src/app');

const getDirs = (dir) =>
  readdirSync(dir).filter((f) => {
    return statSync(join(dir, f)).isDirectory();
  });

const components = getDirs(join(cwd, ExampleType.components));
const services = getDirs(join(cwd, ExampleType.services));
const utilities = getDirs(join(cwd, ExampleType.utilities));

const getExampleFiles = (exampleType, dir) =>
  globSync(`./**/*${docsFileExtension}`, {
    cwd: join(cwd, exampleType, dir),
    ignore: `./${dir}${docsFileExtension}`
  }).reverse();

const getExampleDirRoutes = (exampleType, component, dirs) =>
  dirs.map((dir) => {
    const thisBasename = basename(dir, docsFileExtension);
    const className = getFirstClassNameFromFilePath(join(cwd, exampleType, component, dir));
    return `{ loadComponent: () => import('./${dir.replace(/\.ts$/, '')}').then(m => m.${className}), path: '${thisBasename}', title: '${sentenceCase(thisBasename)} ${noCase(component)} ${ExampleTypeSingular[exampleType]} | Example' + TITLE_SEPARATOR + TITLE_SUFFIX }`;
  });

const generateExamplesRoutes = (exampleType, examples) => {
  examples.forEach((example) => {
    const componentRoutes = getExampleFiles(exampleType, example);
    const componentRoutesString = getExampleDirRoutes(exampleType, example, componentRoutes).join(',\n\t');
    const componentRoutesFile = join(cwd, exampleType, example, `${example}${routesFileExtension}`);
    const rootDocsFilePath = join(cwd, exampleType, example, `${example}${docsFileExtension}`);
    const rootDocsClassName = getFirstClassNameFromFilePath(rootDocsFilePath);
    const rootDocRoute = `\n\t{ loadComponent: () => import('./${example}.docs').then(m => m.${rootDocsClassName}), path: '' },`;
    let componentRoutesContent = sharedImports;
    componentRoutesContent += componentRoutesString ? sharedConstantsImports : `\n`;
    componentRoutesContent += `export const ${camelCase(example)}Routes: Routes = [${rootDocRoute}${componentRoutesString ? `\n\t` : ''}${componentRoutesString}\n];\n\nexport default ${camelCase(example)}Routes;`;
    writeFileSync(componentRoutesFile, componentRoutesContent);
  });
};

const getFirstClassNameFromFilePath = (filePath) => {
  const fileContent = readFileSync(filePath, 'utf8');
  return fileContent.match(/export\s+class\s+(\w+)/)[1];
};

const main = () => {
  // Example routes for components
  generateExamplesRoutes(ExampleType.components, components);
  // Example routes for services
  generateExamplesRoutes(ExampleType.services, services);
  // Example routes for utilities
  generateExamplesRoutes(ExampleType.utilities, utilities);
};

main();
